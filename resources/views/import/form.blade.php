<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8"/>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>–ò–º–ø–æ—Ä—Ç XLSX —á–µ—Ä–µ–∑ WebSocket</title>
    @vite('resources/js/app.js')
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-800 font-sans">
<div class="max-w-3xl mx-auto py-10 px-4">
    <h1 class="text-2xl font-bold text-blue-700 mb-6">üì• –ò–º–ø–æ—Ä—Ç XLSX —á–µ—Ä–µ–∑ WebSocket (Reverb)</h1>

    <form id="uploadForm" method="POST" action="{{ route('import.upload') }}" enctype="multipart/form-data"
          class="bg-white shadow-md rounded-lg p-6 mb-6">
        @csrf
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">–í—ã–±–µ—Ä–∏—Ç–µ XLSX-—Ñ–∞–π–ª:</label>
            <input type="file" name="file" accept=".xlsx" required
                   class="block w-full border border-gray-300 rounded-md p-2 text-sm focus:ring-blue-500 focus:border-blue-500">
        </div>
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç</button>
    </form>
    <div class="bg-white shadow-sm rounded-lg p-4 mb-4">
        <p class="text-sm text-gray-600 mb-1">üì° –°—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞:</p>
        <p id="status" class="text-sm font-medium text-gray-500 italic">–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞...</p>
    </div>
    <div class="bg-white shadow-sm rounded-lg p-4 mb-4">
        <p class="text-sm text-gray-600 mb-1">–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞:</p>
        <p class="text-lg font-semibold text-green-600"><span id="progress">0</span> —Å—Ç—Ä–æ–∫</p>
    </div>

    <div class="bg-white shadow-sm rounded-lg p-4 mb-4">
        <p class="text-sm text-gray-600 mb-1">‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
        <p id="duration" class="text-lg font-semibold text-indigo-600">-</p>
    </div>

    <div class="bg-white shadow-sm rounded-lg p-4">
        <h2 class="text-lg font-semibold text-gray-700 mb-3">‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:</h2>
        <ul id="imported-list" class="max-h-80 overflow-y-auto text-sm space-y-2 list-none">
            <li class="text-gray-400">–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</li>
        </ul>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const progressElem = document.getElementById('progress');
        const durationElem = document.getElementById('duration');
        const list = document.getElementById('imported-list');
        const form = document.getElementById('uploadForm');

        const statusElem = document.getElementById('status');
        let lastUpdate = Date.now();
        let statusInterval;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
        function setStatus(text) {
            statusElem.textContent = text;
            lastUpdate = Date.now();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π > 5 —Å–µ–∫ ‚Äî –ø–∏—à–µ–º, —á—Ç–æ –∂–¥—ë–º
        statusInterval = setInterval(() => {
            const now = Date.now();
            if (now - lastUpdate > 5000) {
                statusElem.textContent = '‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...';
            }
        }, 3000);

        list.innerHTML = '';

        window.EchoAddListener('import-items', '.ImportItemProcessed', (e) => {
            if (Array.isArray(e.items)) {
                e.items.forEach(item => {
                    const li = document.createElement('li');
                    li.textContent = `üü¢ ID: ${item.id}, Name: ${item.name}, Date: ${item.date}`;
                    li.className = 'border-b pb-1';
                    list.appendChild(li);
                });

                const currentCount = parseInt(progressElem.textContent, 10) || 0;
                progressElem.textContent = currentCount + e.items.length;

                setStatus(`‚è≥ –ò–º–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (${progressElem.textContent} —Å—Ç—Ä–æ–∫)`);
            }
        });

        window.EchoAddListener('import-items', '.ImportFinished', (e) => {
            durationElem.textContent = `${e.durationInSeconds} —Å–µ–∫.`;
            setStatus('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');

            clearInterval(statusInterval); // –æ—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É "–∑–∞–≤–∏—Å–∞–Ω–∏—è"
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            progressElem.textContent = '0';
            durationElem.textContent = '-';
            list.innerHTML = '';

            const formData = new FormData(form);

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                    },
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
                }

                // –ù–µ –∂–¥—ë–º json, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ –∑–∞–ø—É—Å–∫–µ
                alert('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω');
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message);
            }
        });
    });
</script>
</body>
</html>

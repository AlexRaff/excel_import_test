
Вопросы к менеджеру по заданию 1:

1. Что делать с уже существующими `id` при импорте?
   - Обновлять записи, пропускать или создавать дубликаты?

2. Нужен ли пользовательский интерфейс для отображения результата импорта 
   (или только текстовый файл `result.txt`)?

3. Какие конкретные правила валидации применимы к каждому полю:
   - `id`: допустимы только положительные числа?
   - `name`: есть ли ограничения на длину или набор символов?
   - `date`: только формат d.m.Y или допускается гибкость?

4. Что делать при ошибках на уровне всего файла (например, файл повреждён или не xlsx)?

5. Как долго нужно хранить прогресс импорта в Redis?
   - До завершения процесса? Очистка вручную? Хранить вечно?

6. Нужно ли поддерживать повторный импорт того же файла?
   - Удалять ли старые данные перед импортом?

7. Кто запускает импорт: авторизованные пользователи или любая форма без авторизации?

8. Какой именно формат и структура ожидается у `result.txt`?
   - Только строка и ошибки? Или добавлять временные метки, имя файла и т.д.?

9. Какие именно события должны передаваться через Laravel Echo:
   - Каждая созданная запись?
   - Итог завершения импорта?

10. Предполагается ли импорт больших файлов (например, 10k+ строк)?
    - Это важно для архитектурного решения (синхронно/асинхронно, очередь и т.д.)
    
11. Вопрос про доступы к функционалу, кто будет пользоватся, и на каких условиях
12. Есть ли лимиты файла, ограничения по расширению

Задача для junior

Контекст:
Нужно добавить в текущий проект модуль импорта Excel-файлов с данными, включая валидацию, сохранение в БД и логирование ошибок. Система предназначена для контент-менеджеров, которые будут загружать файлы, и разработчиков, которым потребуется поддержка и доработка модуля в будущем.

Цель:
Реализовать расширяемую и надёжную систему импорта данных из .xlsx-файлов.

Этапы внедрения:

1. Добавь новый функционал импорта Excel в проект в виде отдельного контроллера и сервиса.

2. Создай простую HTML-страницу (или Blade-шаблон) с формой загрузки .xlsx-файла.

3. На стороне сервера:
   - Используй пакет `maatwebsite/excel` для чтения файла.
   - Структура входного Excel: столбцы `id`, `name`, `date` (формат `день.месяц.год`, напр. `01.06.2024`).

4. Обрабатывай файл построчно:
   - `id` — обязательное целое число.
   - `name` — обязательная строка.
   - `date` — обязательная дата в формате `d.m.Y`.

5. Строки, содержащие ошибки:
   - Не сохраняем.
   - Логируем в `storage/app/result.txt` в формате:
     <номер строки> - <ошибка1>, <ошибка2>, ...

6. Строки без ошибок:
   - Сохраняем в таблицу `import_rows` (добавь миграцию, если таблицы нет).

7. Реализуй API-эндпоинт (GET), который возвращает импортированные данные, сгруппированные по дате:
   [
     {
       "date": "2024-06-01",
       "items": [ { ... }, ... ]
     },
     ...
   ]

8. (Дополнительно) Храни прогресс импорта в Redis с уникальным ключом.
   - Подумай, как реализовать Event с Laravel Echo, чтобы отправлять информацию о новых записях.

9. Покрой хотя бы одну ключевую часть функционала тестом:
   - Например, что строки с некорректной датой не сохраняются.

10. Убедись, что:
   - Миграции написаны.
   - Пример файла `.env.example` обновлён.
   - В `README.md` добавлены инструкции по запуску и использованию импорта.

Замечания:
- Не ломай текущий функционал проекта.
- Структурируй код по слоям (контроллер / сервис / валидатор).
- Пиши читаемо и оставляй комментарии, особенно в сложных местах.
- Используй Laravel best practices, особенно при работе с формами, запросами и очередями (если будешь их подключать).

Примерная структура импорта

├── Contracts
│   └── ParserInterface.php
├── Controllers
│   └── ImportController.php
├── Dto
│   └── ImportRowDto.php
├── Events
│   ├── ImportFinished.php
│   └── ImportItemProcessed.php
├── Jobs
│   ├── ImportChunkJob.php
│   └── ImportStartJob.php
├── Parsers
│   ├── AbstractExcelParser.php
│   └── XlsxParser.php
├── Services
│   └── ImportService.php
└── Validators
    ├── ExcelRowValidator.php
    └── ValidationResult.php

API

└── Controllers
    ├── Api
    │   └── ImportedItemsController.php


